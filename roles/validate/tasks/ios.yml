---
- name: Pause for 5 seconds
  pause:
    seconds: 5

- name: Show IPSLA
  ansible.utils.cli_parse:
    command: show ip sla summary
    parser:
      name: ansible.netcommon.pyats
  register: ipsla
  when: inventory_hostname == 'rtr3'

- name: display value of ipsla
  debug:
    var: ipsla ['parsed']
  when: inventory_hostname == 'rtr3'

- name: validate IPSLA return_code state
  when:
    - check != 'yes'
    - inventory_hostname == 'rtr3'
  ansible.utils.validate:
    data: "{{ ipsla ['parsed']['ids']}}"
    criteria:
      - "{{ lookup('file','../criteria/ios_ipsla_criteria.json') | from_json }}"
    engine: ansible.utils.jsonschema
  #ignore_errors: true
  register: result

- name: IPSLA Validation
  debug:
    var: result
  when: inventory_hostname == 'rtr3'

- name: backup cisco ios configuration
  cisco.ios.config:
    backup: true
    backup_options:
      dir_path: /tmp/
      filename: "{{ inventory_hostname }}.cfg"
  register: config_output
  when: inventory_hostname in groups['cisco_only']

- name: remove non config lines - regexp
  lineinfile:
    #path: "{{ config_output.backup_path }}"
    path: "/tmp/{{ inventory_hostname }}.cfg"
    line: "Building configuration..."
    state: absent
  when: inventory_hostname in groups['cisco_only']

- name: Write to remote server
  ansible.builtin.copy:
    src: "/tmp/{{ rtr_item }}.cfg"
    dest: "/home/ec2-user/intended_config/{{ rtr_item }}.cfg"
  when: inventory_hostname in groups['backup-servers']
  loop: "{{ rtrs }}"
  loop_control:
    loop_var: rtr_item
